#! /bin/bash
### BEGIN INIT INFO
# Provides:             rodebian
# Required-Start:       $local_fs
# Required-Stop:        $local_fs
# X-Stop-After:     	$network
# Should-Start:
# Should-Stop:
# Default-Start:        S
# Default-Stop:         0 6
# Short-Description:    read-only debian tmpfs and sync
# Description:          reda-only debian tmpfs and sync
### END INIT INFO
#
# skeleton  example file to build /etc/init.d/ scripts.
#       This file should be used to construct scripts for /etc/init.d.
#
#       Written by Miquel van Smoorenburg <miquels@cistron.nl>.
#       Modified for Debian
#       by Ian Murdock <imurdock@gnu.ai.mit.edu>.
#
# Version:  @(#)skeleton  1.9  26-Feb-2001  miquels@cistron.nl
#

# 'rodebian'
# (Read-Only Debian : A read-only root for systems running from flash media)
#
# adapted from 'voyage-sync', part of the 'voyage-util' package of Voyage Linux
# Ghoti Ltd, June 2019
#
# Source: http://svn.voyage.hk/repos/voyage/trunk/voyage-util
# Copyright: Copyright 2005-2015 Punky Tse <punkytse@yahoo.com>
# License: GPL-2+
#

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
NAME=rodebian
DESC=rodebian

# where to mount rw tmpfs
TMPFS_ROOT=/rw
# default to smaller of 2GB or 20% RAM
MEM=$(expr $(cat /proc/meminfo | sed -n -e '/MemTotal/ s/[^0-9]*\([0-9]*\).*/\1/p') / 5120)

if [ $MEM -gt 2048 ]; then
  TMPFS_SIZE="2g"
else
  TMPFS_SIZE="20%"
fi
# /etc/mtab is usually a symlink to /proc/self/mounts
MTAB=/proc/self/mounts

# some systemd services write in var/lib (eg, systemd-timesync)
SYNC_DIRS="var/log var/tmp var/lib/systemd"
SAVED_DATE_FILE=/var/log/$NAME.saved-date

NEED_REBOOT=no

# using the following commands to install
#
#	update-rc.d rodebian start 36 S . stop 99 0 6 .

if [ -f /etc/default/$NAME ] ; then
	. /etc/default/$NAME;
fi

SYNC_DIRS="$SYNC_DIRS $RODEBIAN_SYNC_DIRS"


log() {
        echo "`date +\"%b %e %T\"` $NAME: $@"
}


mount_if_not() {
	log "Ensure $@ is mounted"
	TMPFS_MOUNT=$(grep -E "^tmpfs\s+\$@\s+" $MTAB)
	TMPFS_OPTS="nodev,nosuid,size=$TMPFS_SIZE"
	if [ "$TMPFS_MOUNT" = "" ] ; then
		log "Mounting tmpfs at $@ with options $TMPFS_OPTS"
		mount -t tmpfs tmpfs $@ -o $TMPFS_OPTS
	fi
}

copy_ro_to_rw() {
	if [ -d /ro ] ; then
		if [ -d $TMPFS_ROOT ] ; then
			log "Copying /ro to $TMPFS_ROOT"

			DIRMODE=$(stat -c "%a" $TMPFS_ROOT)
			tar -C /ro -cf - . | tar -C $TMPFS_ROOT -xf -
			chmod $DIRMODE $TMPFS_ROOT
		fi
	fi
}

save_system_time() {
	date > $SAVED_DATE_FILE
	log "Saved system time: `cat $SAVED_DATE_FILE`"
}

restore_system_time() {
	if [ -f $SAVED_DATE_FILE ] ; then
		CURRENT_DATE=`date`
		if [ "${CURRENT_DATE:24:4}" -lt "2011" ] ; then
			# Only if no RTC present, or no battery 
			log "Restore system time to: `cat $SAVED_DATE_FILE`"
			date -s "`cat $SAVED_DATE_FILE`"
		fi
	fi
}

case $1 in
	'start')
		if [ "$RODEBIAN_SAVE_DATE_TIME" = "YES" ] ; then
			restore_system_time
		fi
		mount_if_not "/tmp" 
		if [ "$TMPFS_ROOT" != "/tmp" ] ; then
			mount_if_not "$TMPFS_ROOT"
		fi
		log "Start tmpfs..."
		# check SYNC_DIRS if recovery after a power failure is activated
		if [ "$RODEBIAN_SYNC_RECOVER" = "YES" ] ; then
			log "Checking if recovery from a power failure is needed..."
			RODEBIAN_SYNC_RECOVER_DIRS=${RODEBIAN_SYNC_RECOVER_DIRS:-$SYNC_DIRS}
			for SYNC_DIR in $RODEBIAN_SYNC_RECOVER_DIRS ; do
				if [ -d /.sync/$SYNC_DIR ] ; then
					log "Recover'ing /.sync/$SYNC_DIR to `dirname /$SYNC_DIR`"
					rsync -a -q --delete-after /.sync/$SYNC_DIR `dirname /$SYNC_DIR`
					log "`dirname /$SYNC_DIR` recovered"
					NEED_REBOOT=yes
				fi
			done
			# and now remove /.sync
			rm -rf /.sync
			# check if reboot is needed
			if [ "$NEED_REBOOT" = yes ] ; then
				log "Will now restart after recovery from a power failure"
				sync
				# wait for logging to console
				sleep 1
				reboot -f
			fi
		fi

		copy_ro_to_rw

		log "Setting up tmpfs for changed files..."
		for SYNC_DIR in $SYNC_DIRS $RODEBIAN_RW_DIRS; do
			if [ ! -d /$SYNC_DIR ] ; then continue; fi
			[ ! -d $TMPFS_ROOT/$SYNC_DIR ] && mkdir -p $TMPFS_ROOT/$SYNC_DIR

			PERM=$(stat --format=%U:%G /$SYNC_DIR)
			chmod --reference=/$SYNC_DIR $TMPFS_ROOT/$SYNC_DIR
			chown --reference=/$SYNC_DIR $TMPFS_ROOT/$SYNC_DIR
			if [ "$(ls -A /$SYNC_DIR)" ] ; then cp -rp /$SYNC_DIR/. $TMPFS_ROOT/$SYNC_DIR/; fi
			log "tmpfs: mount back $TMPFS_ROOT/$SYNC_DIR to $SYNC_DIR"
			mount --bind $TMPFS_ROOT/$SYNC_DIR /$SYNC_DIR 
			chown $PERM /$SYNC_DIR

		done
		log "Start tmpfs completed"
		;;

	'sync')
        if [ "$RODEBIAN_SAVE_DATE_TIME" = "YES" ] ; then 
			save_system_time
        fi
		log "Synchronizing tmpfs changed files..."
		for SYNC_DIR in $SYNC_DIRS ; do
			if [ ! -d /$SYNC_DIR ] ; then continue; fi
			if [ ! -d /.sync/$SYNC_DIR ] ; then
				mkdir -p /.sync/$SYNC_DIR
				PERM=$(stat --format=%U:%G /$SYNC_DIR)
				chown $PERM /.sync/$SYNC_DIR
			fi

			log "Sync'ing /$SYNC_DIR to `dirname /.sync/$SYNC_DIR`"
			if [ "$(ls -A /$SYNC_DIR)" ]; then
				rsync -a -q --delete-after /$SYNC_DIR/. /.sync/$SYNC_DIR &
			fi
		done
		log "Wait until all sync complete."
		wait
		sync
		log "Synchronization tmpfs completed"
		;;

	'stop')
		log "Stop tmpfs..."
		[ -f /sbin/remountrw ] && /sbin/remountrw

		# call self "sync"
		$0 sync

		# then kill suspicous process in sync & RW dir and unmount
		for SYNC_DIR in $SYNC_DIRS $RODEBIAN_RW_DIRS; do
			if [ ! -d /$SYNC_DIR ] ; then continue; fi
			if [ "$(ls -A /$SYNC_DIR)" ]; then
			for P in `lsof -F p /$SYNC_DIR`
			do
				log "Killing process: $(ps --no-heading --format=comm -p ${P:1})"
				kill ${P:1}
			done
			fi
			sleep 1

			log "Unmount'ing /$SYNC_DIR"
			umount /$SYNC_DIR

			log "Sync'ing /.sync/$SYNC_DIR to `dirname /$SYNC_DIR`"
			rsync -a -q --delete-after /.sync/$SYNC_DIR `dirname /$SYNC_DIR` &
		done
		# wait until all sync complete.
		log "Wait until all sync complete."
		wait

		# at last remove /.sync
		rm -rf /.sync
		sync
		log "Stop tmpfs completed"
		;;
  	force-reload|restart)
    	;;

	*)
		echo "Usage: /etc/init.d/rodebian {start|stop|sync}" >&2
	;;
esac

